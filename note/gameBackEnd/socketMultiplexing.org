* 阻塞式I/O和异步式I/O
+ 阻塞式I/O
  - 举一个例子，你要去街上买糖果，但是你自己身上没有钱，你只能等妈妈回来给你钱你才能拿着妈妈给你的钱去买糖果。
  但是呢，你今天又有作业需要写。于是不聪明的你，选择在妈妈回来给你钱，然后你拿着钱去买糖果，买完糖果开开心
  心吃完糖果后再去写作业。由于一直在傻傻的等妈妈，你的作业做到很晚才写完，被妈妈教训了一顿，还错过了动画片。
  - 阻塞式的I/O就像是不聪明的你，在没有数据到达(妈妈没回来给你钱)之前，只知道傻傻的等，而不是去做一些其他的事
  情。
+ 异步式I/O
  - 还是上面的例子，这次你学聪明了，你知道在妈妈回来之前，先写完作业。于是你因为很早完成作业，被妈妈表扬，也
  顺利的看到了动画片。
  - 异步式I/O就是当你在等一些数据的时候，你可以先去做别的事情，等数据到达之后，你再回来做你该做的事情。

* 阻塞式的程序    
+ 阻塞式客户端
  #+begin_src csharp :file blockedClient.cs
    using UnityEngine;
    using System.Net.Sockets; // socket编程的名称空间
    using UnityEngine.UI;

    public class Echo:MonoBehaviour {
        // 定义socket
        Socket socket;
        // UGUI unity的输入框
        public InputField InputField;
        public Text text;

        // 点击连接按钮的函数
        public void Connection(){
            //Socket
            socket = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);
            //Connect
            socket.Conn ct("127.0.0.1",8888); // 这里可能会阻塞
        }

        public void Send(){
            //Send
            string sendStr = InputField.text;
            byte[] sendBytes = System.Text.Encoding.Default.GetBytes(sendStr);
            socket.Send(sendBytes); // 发送过程中，程序必须暂停等待，等发完以后才能执行下面的程序
            //Recv
            byte[] readBuff = new byte[1024];
            int count = socket.Receive(readBuff); // 接受的过程中，程序也必须暂停等待，十分消耗时间
            string recvStr = System.Text.Encoding.Default.GetString(readBuff,0,count);
            text.text = recvStr;
            //Close
            socket.Close();
        }
    }
  #+end_src
  - 上面的程序中我们看见，程序在接收，发送的过程中，都必须进入等待的状态
  - 其实不止是接受和发送，在连接的时候，如果网速很慢，程序也会卡住，进入阻塞  
  #+begin_src csharp :file blockedServer.cs
    using System;
    using System.Net;
    using System.Net.Sockets;

    namespace EchoServer
    {
        class MainClass{
            public static void Main(string[] args){
                Console.WriteLine("Hello World!");
                //Socket
                Socket listenfd = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);

                //Bind
                IPAddress ipAdr = IPAddress.Parse("127.0.0.1"); // 指定ip地址
                IPEndPoint ipEp = new IPEndPoint(ipAdr,8888); // 指定ip和端口
                listenfd.Bind(ipEp); //这里绑定

                //Listen
                listenfd.Listen(0);//listenfd.Listen(backlog)开启监听。
                                    //参数backlog指定队列中最多可容纳等待接受的连接数，0表示不限制
                Console.WriteLine("[服务器]启动成功");
                while(true){
                    //Accept
                    Socket connfd = listenfd.Accept();  // 接收客户端连接 ,客户端没有连接时，服务程序会卡在这里
                    Console.WriteLine("[服务器]Accept");
                    //Receive
                    byte[] readBuff = new byte[1024];
                    int count = countfd.Receive(readBuff);
                    string readStr = System.Text.Encoding.Default.GetString(readBuff,0,count);
                    Console.WriteLine("[服务器接收]"+readStr);

                    byte[] sendBytes = System.Text.Encoding.Default.GetBytes(readStr);
                    connfd.Send(sendBytes)
                }
            }
        }
    }
  #+end_src
  - 上述服务端程序在Accept,Receive,Send阶段都会发生阻塞,导致程序卡住,此时的服务端程序只能接收一个连接，
    一个服务器只能接受一个连接，这很显然是不合理的。

* 异步和多路复用
在上述的程序中，我们全部使用的是阻塞API(Connect,Send,Receive等),可称为同步Socket程序，它简单且容易实现。但是会时不时卡住。
异步和多路复用是解决程序阻塞的方法。
** 异步
*** 异步客户端
在同步客户端中使用API Connect 连接服务器，并使用API Send和Receive接收数据。在异步模式下、客户端可以使用BeginConnect和
EndConnect等异步API完成同样的功能。
**** 异步Connect
socket 的每一个同步API(比如Connect) 对应着两个异步API，分别在原名称前面加上Begin和End(比如BeginConnect和EndConnect)。
+ BeginConnect 函数
  #+begin_src csharp
    public IAsyncResult BeginConnect(string host,int port,AsyncCallback requestCallback,object state)
  #+end_src
  | 参数            | 说明                                                                   |
  |-----------------+------------------------------------------------------------------------|
  | host            | 远程主机的名称(ip)如"127.0.0.1"                                        |
  |-----------------+------------------------------------------------------------------------|
  | port            | 远程主机的端口号，如"8888"                                             |
  |-----------------+------------------------------------------------------------------------|
  | requestCallback | 一个AsyncCallback委托，也就是回调函数、回调函数的参数必须是这样的形式: |
  |                 | void ConnectCallback(IAsyncResult ar)                                  |
  |-----------------+------------------------------------------------------------------------|
  | state           | 一个用户定义的对象，可包含连接操作相关信息。此对象会传递给回调函数     |
+ EndConnect 函数
  #+begin_src csharp
    public void EndConnect(IAsyncResult asyncResult)
  #+end_src
  在BeginConnect的回调函数中调用EndConnect,可完成连接
+ 异步客户端连接代码
  #+begin_src csharp :file asyncClientConnect.cs
    using System;

    // 点击连接按钮
    public void Connection(){
        //Socket
        socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream,ProtocolType.Tcp);
        // begin connect
        socket.BeginConnect("127.0.0.1",8888,ConnectCallback,socket);
    }

    //begin connect 回调
    public void ConnectCallback(IAsyncResult ar){
        try{
            Socket socket = (socket) ar.AysncState;
            socket.EndConnect(ar);
            Debug.Log("Socket Connect succ")
        }catch(SocketException ex){
            Debug.Log("Socket connect fail" + ex.ToString());
        }
    }
  #+end_src
  1) 由BeginConnect 最后一个参数传入的socket，可以在回调函数中使用ar.AsyncState获取到
**** 异步Receive
异步Receive 可以解决在之前使用Receive这个阻塞方法时，会导致客户端卡住的问题。
+ BeginReceive 函数
  BeginReceive 用户实现异步数据的接收
  #+begin_src csharp
    public IAsyncResult BeginReceive(
        byte[] buffer,
        int offset,
        int size,
        SocketFlags socketFlags,
        AsyncCallback callback,
        object state
        );
  #+end_src
  | 参数        | 说明                                                                                       |
  |-------------+--------------------------------------------------------------------------------------------|
  | buffer      | Byte类型的数组，是接收数据的缓冲区                                                         |
  |-------------+--------------------------------------------------------------------------------------------|
  | size        | 最多接收的字节数                                                                           |
  |-------------+--------------------------------------------------------------------------------------------|
  | socketFlags | SocketFlags值的按位组合                                                                    |
  |-------------+--------------------------------------------------------------------------------------------|
  | callback    | 回调函数，一个AsyncCallback委托                                                            |
  |-------------+--------------------------------------------------------------------------------------------|
  | state       | 一个用户定义对象，其中包含接收操作的相关信息。当操作完成时，此对象会被传递给EndReceive委托 |
+ EndReceive函数
  BeginReceive对应的是EndReceive,他的返回值代表了接收到的字节数
  #+begin_src csharp
    public int EndReceive(
        IAsyncResult asyncResult
        )
  #+end_src
+ 异步Receive客户端程序代码 
  #+begin_src csharp :tangle "AsyncReceiveClient.cs"
    using System.Collections;
    using System.Collections.Generic;
    using UnityEngine;
    using System.Net.Sockets;
    using UnityEngine.UI;
    using System;
    
    public class Echo : MonoBehaviour{
        Socket socket;
        public InputField InputFeld;
        public Text text;
        byte readBuff = new byte[1024];
        string recvStr = "";
        //点击链接按钮
        public void Connections(){
    
            //Socket
            socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream,ProtocolType.Tcp);
            // begin connect
            socket.BeginConnect("127.0.0.1",8888,ConnectCallback,socket);
        }
        //connect 回调
        public void ConnectCallback(IAsyncResult ar){
            try{
                Socket socket = (Socket) ar.AsyncState;
                socket.EndConnect(ar);
                Debug.Log("Socket Connect Succ");
                socket.BeginReceive (readBuff,0,1024,0,ReceiveCallback,socket);
            }catch(SocketException ex){
                Debug.Log("Socket Connect fail" + ex.ToString());
            }
        }
    
        //Receive 回调
        public void ReceiveCallback(IAsyncResult ar){
            try{
                Socket socket = (Socket) ar.AsyncState;
                int count = socket.EndReceive(ar);
                recvStr = System.Text.EnCoding.Default.GetString(readBuff,0,count);
    
                socket.BeginReceive(readBuff,0,1024,0,ReceiveCallback.socket);
            }catch(SocketException ex){
                Debug.Log("Socket Receive fail" + ex.ToString());
            }
        }
    
        public void Send(){
            //Send
            string sendStr = InputField.text;
            byte[] sendBytes = System.Text.Encoding.Default.GetBytes(sendStr);
            socket.Send(sendBytes);
        }
    
        public void Upate(){
            text.text = recvStr;
        }
    
    }
  #+end_src
  1) BeginReceive的参数
     上述程序中，BeginReceive的参数为（readBuff，0，1024，0，ReceiveCallBack，socket）。第一个参数readBuff表示接收
     缓冲区；第二个参数0表示从readBuff的第0位开始接收数据。第三个参数1024代表每次最多接收1024个字节的数据
  2) BeginReceive的调用位置
     程序在ConnectCallback中调用了一次BeginReceive，这是在连接成功后，就开始接收数据。在BeginReceive中也调用了一次
     BeginReceive这时是当上一串数据接收后，等待下一串数据的到来
  3) Update和recvStr
     在Unity中，只有主线程可以操作UI组件。由于异步回调是在其他线程执行的。所以不能直接给text.text赋值。应该在主线程执行
     的Update中再给text.text赋值
   
**** 异步Send
Send也是一个阻塞方法，可能会导致客户端在发送数据的一瞬间卡住。TCP是可靠连接，当接收方没有收到数据时，发送方会重新发送数据，
直至确认接收方接收到数据为止。
在操作系统内部，每个Socket都会有一个发送缓冲区，用于保存那些接收方没有确认的数据。当缓冲区满的时候，Send就会阻塞，直到缓冲
区的数据被确认腾出空间。

+ 异步Send函数
  异步Send不会卡住程序，当数据成功写入缓冲区（或发生错误）时会调用回调函数。
  #+begin_src csharp
    public IAsyncResult BeginSend(
        byte[] buffer,
        int offset,
        int size,
        SocketFlags socketFlags,
        AsyncCallback callback,
        object state
        )
  #+end_src
  | 参数        | 说明                                                                                 |
  |-------------+--------------------------------------------------------------------------------------|
  | buffer      | Byte类型的数组，包含要发送的数据                                                     |
  | offset      | 从buffer中的offset位置开始发送                                                       |
  | size        | 要发送的字节数                                                                       |
  | socketFlags | SocketFlags值的按位组合，这里设置为0                                                 |
  | callback    | 回调函数，一个AsyncCallback委托                                                      |
  | state       | 一个用户定义对象，其中包含发送操作的相关信息 当操作完成时，此对象会被传给EndSend委托 |
+ EndSend函数
  #+begin_src csharp
    public int EndSend(
        IAsyncResult asyncResult
        )
  #+end_src
  EndSend函数的返回值代表发送的字节数，如果发送失败会抛出异常
+ 客户端异步Send代码
  #+begin_src csharp :tangle AsyncSendClient.cs
    // 点击发送按钮
    public void Send(){
        //Send
        string sendStr = InputFeld.text;
        bytep[] sendBytes = System.Text.Encoding.Default.GetBytes(sendStr);
        socket.BeginSend(sendBytes,0,sendBytes.Length,0,SendCallback,socket);
    }
    
    //Send回调
    public void SendCallback(IAsyncResult ar){
        try{
            Socket socket = (Socket) ar.AsyncState;
            int count = socket.EndSend(ar);
            Debug.Log("Socket Send succ"+count);
        }catch(SocketException ex){
            Debug.Log("Socket Send fail"+ex.ToString());
        }
    }
  #+end_src
*** 异步服务端
异步服务端需要同时处理多个客户端的连接，及时响应。所以需要使用异步方法，让服务端同时处理多个客户端的数据，及时响应。
**** 管理客户端
  在一个聊天室里，某个用户说了一句话后，服务端需要把这句话发送给每一个人，所以需要一个服务器列表，保存所有连接的客户端信息。
  可以定义一个ClientState类，用于保存一个客户端的信息。ClientState包含TCP连接所需Socket，以及用于填充BeginReceive参数
  的读缓冲区readBuff。
  #+begin_src csharp
    class ClientState{
        public Socket socket;
        public byte[] readBuff = new byte[1024];
    }
  #+end_src
 c#提供了List和Dictionary等容器类数据结构（System.Collection.Generic命名空间内），其中Dictionary（字典）是一个集合，
 每个元素都是一个键值对，它是常用于查找和排序的列表。可以通过Add方法给Dictionary添加元素，并通过ContainsKey方法判断
 Dictionary里面是否包含某个元素。在服务端中定义一个Dictionary<Socket,ClientState>类型的Dictionary,以Socket作为key
 以ClientState作为Value。
  #+begin_src csharp
    static Dictionary<Socket,ClientState> clients = new Dictionary<Socket,ClientState>();
  #+end_src
**** 异步Accept
除了BeginSend、BeginReceive等方法外、异步服务端还会用到异步Accept方法BeginAccept和EndAccept。
 + BeginAccept
   #+begin_src csharp
     public IAsyncResult BeginAccept(
         AsyncCallback callback,
         object state
         )
   #+end_src
| 参数          | 说明                                          |
|---------------+-----------------------------------------------|
| AcyncCallBack | 回调函数                                      |
| state         | 表示状态信息，必须保证state中包含socket的句柄 |
调用BeginAccept后，程序会继续执行，而不是阻塞在该语句上。等到客户端连接上来，回调函数AsyncCallback将被执行。
+ EndAccept
  在回调函数中开发者可以使用EndAccept获取新客户端的Socket，还可以获取state参数传入的数据。
  #+begin_src csharp
    public Socket EndAccept(
        IAsyncResult asyncResult
        )
  #+end_src
+ 程序结构
  服务器会经历Socket、Bind、Listen三个步骤初始化监听Socket，然后调用BeginAccept开始异步处理客户端连接。如果有客户端
  连接进来，异步Accept的回调函数AcceptCallback将被调用，会让客户端开始接收数据，然后继续调用BeginAccept等待下一个客户
  的连接。
+ 服务端代码
  #+begin_src csharp :tangle AsyncServer.cs
    using System;
    using System.Net;
    using System.Net.Sockets;
    using System.Collections.Generic;
    
    class ClientState
    {
        public Socket socket;
        public Byte[] readBuff = new byte[1024];
    }
    
    class MainClass
    {
        static Socket listenfd;
        static Dictionary<Socket, ClientState> clients = new Dictionary<Socket, ClientState>();
    
        public static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            //Socket
            listenfd = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            //Bind
            IPAddress ipAdr = IPAddress.Parse("127.0.0.1");
            IPEndPoint ipEp = new IPEndPoint(ipAdr, 8888);
            listenfd.Bind(ipEp);
            //Listen
            listenfd.Listen(0);
            Console.WriteLine("[服务器]启动成功");
            //Accept
            listenfd.BeginAccept(AcceptCallback, listenfd);
            //等待
            Console.ReadLine();
        }
    
        public static void AcceptCallback(IAsyncResult ar)
        {
            try
            {
                Console.WriteLine("[服务器]Accept");
                Socket listenfd = (Socket)ar.AsyncState;
                Socket clientfd = listenfd.EndAccept(ar);
                //clients 列表
                ClientState state = new ClientState();
                state.socket = clientfd;
                clients.Add(clientfd, state);
                //接收数据BeginReceive
                clientfd.BeginReceive(state.readBuff, 0, 1024, 0, ReceiveCallback, state);
                //继续Accept
                listenfd.BeginAccept(AcceptCallback, listenfd);
    
            }
            catch (SocketException ex)
            {
                Console.WriteLine("Socket Accept fail" + ex.ToString());
            }
        }
    
        public static void ReceiveCallback(IAsyncResult ar)
        {
            try
            {
                ClientState state = (ClientState)ar.AsyncState;
                Socket clientfd = state.socket;
                int count = clientfd.EndReceive(ar);
                //客户端关闭
                if (count == 0)
                {
                    clientfd.Close();
                    clients.Remove(clientfd);
                    Console.WriteLine("Socket Close");
                    return;
                }
                string recvStr = System.Text.Encoding.Default.GetString(state.readBuff, 0, count);
                byte[] sendBytes = System.Text.Encoding.Default.GetBytes("echo" + recvStr);
                clientfd.Send(sendBytes); // 减少代码量，不用异步
                clientfd.BeginReceive(state.readBuff, 0, 1024, 0, ReceiveCallback, state);
            }
            catch (SocketException ex)
            {
                Console.WriteLine("Socket Receive fail" + ex.ToString());
            }
        }
    
    }
    
  #+end_src
**** TODO 多路复用
DEADLINE: <2021-08-21 Sat 11:00> SCHEDULED: <2021-08-21 Sat 09:30>
