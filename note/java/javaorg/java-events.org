* AWT events solution 
  - Event: packaged the special events that happend on the GUI sdk(ususally an execute made by user)
  - Events Source: the place where events happend.
  - Listener:have the responseablity to monitor the events happend on the Events Source,and give the solution to handle the events
  - Events processor: the solution that used by Listener 
** let`s have a example
	#+BEGIN_SRC java
	import java.awt.*;	
	import java.event.*;

	public class AwtEvents {
        public static void main(String[] args){
            Frame f=new Frame();
			f.setSize(400,300);
			f.setLocation(300,200);
			f.setVisible(true);
			MyWindowListner ml=new MyWindowListner();
			f.addWindowListener(ml);
		    }
		}

    class MyWindowListner implements WindowListener {//create the listener to monitor the events
	    public void windowClosing(WindowEvent e){//create a processor way to handle the events 
            Window window = e.getWindow();
			window.setVisible(false);
			window.dispose();
        }

        public void windowActivated(WindowEvent e){

		}

		public void windowClosed(WindowEvent e) {

		}
		
		public void windowDeactivated(WindowEvent e){
		
		}


		public void windowDeiconified(WindowEvent e){

		}

		public void windowIconified(WindowEvent e){
		
		}

		public void windowOpened(WindowEvent e){

		}
    }
	
	#+END_SRC
* Events adapter
  - account to the instence above we can see that the WindowListener interface has defined seven methods that we need to implements;
  - to make our source more simple jdk provide a adapter class.They are the WindowListener default instenced class(all the interface has been instenced)
** let`s have a example

    #+BEGIN_SRC java
	import java.awt.*;
	import java.awt.event.WindowAdapter;
	import java.awt.event.WindowEvent;
	import java.awt.event.WindowListener;
	
	public class AwtEvents {
        public static void main(String[] args){
            Frame f=new Frame();
			f.setSize(400,300);
			f.setLocation(300,200);
			f.setVisible(true);
			MyWindowListener ml=new MyWindowListener();
			f.addWindowListener(ml);
		}
	}

    class MyWindowListener extends WindowAdapter{
        public void windowClosing(WindowEvent e){
	        Window window=(Window) e.getComponent();
            window.dispose();
        }
	}
   #+END_SRC
   
** We can use faceless internal class to create a object used to monitor.
*** example
   #+BEGIN_SRC java
   import java.awt.*;
   import java.awt.event.*;
   public class Example10{
       public static void main(String[] args){
	       Frame f = new Frame("my frame");
		   f.setSize(400,300);
		   f.setLocation(300,200);
		   f.setVisible(true);
		   Button btn = new Button("EXIT");
		   f.add(btn);
		   btn.addMouseListener(new MouseAdapter()
		       public void mouseClicked(MouseEvent e){
			       System.exit(0);
			   }
		   )
	   }
   }
   #+END_SRC
* common events types
** window event
   1. Most of the GUI Applications need Windows to be the base container.JDK has provied a WindowsEvent
	  to represent this windowEvent.
	  #+BEGIN_SRC java
	  import java.awt.*;
	  import java.awt.event.*;
	  public class example11{
	      public static void main(String[] args){
		      final Frame f = new Frame("WindowEvent");
			  f.setSize(400,300);
			  f.setLocation(300,200);
			  f.setVisible(true);
			  f.addWindowListener(new WindowListener(){
			  public void windowClosing(WindowEvent e){//create a processor way to handle the events 
                      Window window = e.getWindow();
				      window.setVisible(false);
					  window.dispose();
              }

			  public void windowActivated(WindowEvent e){

			  }

			  public void windowClosed(WindowEvent e) {

			  }
		
			  public void windowDeactivated(WindowEvent e){
		
			  }


			  public void windowDeiconified(WindowEvent e){

			  }

			  public void windowIconified(WindowEvent e){
		
			  }

			  public void windowOpened(WindowEvent e){

			  }     public void windowOpened 
			  });
		  }
	  }
	  #+END_SRC
** Mouse events
   1. Almost all of the kits can generate mouse events
	  #+BEGIN_SRC java
	  import java.awt.*;
	  import java.awt.event;
	  public class example12{
	      public static void main(String[] args){
		     final Frame f = new Frame("WindowEvent");
			 f.setLayout(new FlowLayout());
			 f.setSize(300,200);
			 f.setLocation(300,200);
			 f.setVisible(true);
			 Button but = new Button("Button");
			 f.add(but);
			 but.addMouseListener(new MouseListener()
			     public void mouseReleased(MouseEvent e){
				     System.out.println("mouseReleased events");
				 }
				 public void mousePressed(MouseEvent e){
				     System.out.println("mousePressed events");
				 }
				 public void mouseExited(MouseEvent e){
				     System.out.println("mouseExited events");
				 }
				 public void mouseEntered(MouseEvent e){
				     System.out.println("mouseEntered events");
				 }
				 public void mouseClicked(MouseEvent e){
				     System.out.println("mouseClicked events")
				 }
			 );
		  }
	  }
	  #+END_SRC
   2. MouseEvent class defined many common values to mark mouse action
	  #+BEGIN_SRC java
	  public void mouseClicked(MouseEvent e){
	      if(e.getButton()==e.BUTTON1){
		      System.out.println("left");
		  }
		  if(e.getButton()==e.BUTTON3){
		      System.out.println("right");
		  }
		  if(e.getButton()==e.BUTTON2){
		      System.out.println("middle button pressed");
		  }
	  }
	  #+END_SRC
   3. We can use getClickCount() methods to cout the times that the mouse pressed
** keyboard events
   #+BEGIN_SRC java
   import java.awt.*;
   import java.awt.event.*;
   public class example13{
       public static void main(String[] args){
	       Frame f = new Frame("KeyEvent");
		   f.setLayout(new FlowLayout());
		   f.setSize(400,300);
		   f.setLocation(300,200);
		   TextField tf = new TextField(30);
		   f.add(tf);
		   f.setVisible(true);
		   tf.addKeyListener(new KeyAdapter() {
		       public void keyPressed(KeyEvent e){
			       int KeyCode = e.getKeyCode();
				   String s = KeyEvent.getKeyText(KeyCode);
				   System.out.print("text:"+s+",");
			   }
		   });
	   }
   }
   #+END_SRC
* Swing
  1. Swing is more rich portable and powerful than AWT.Ususally we call AWT weight kits and call Swing light kits.
** JFrame
   1. The most common Swing kits is JFrame.An independent top-level window the same as the Frame of awt.
	  #+BEGIN_SRC java
	  import java.awt.FlowLayout;
	  import javax.swing.*;
	  public class Example15 extends JFrame{
	      public Example15(){
		      this.setTitle("JFrameTest");
			  this.setSize(250,300);
			  JButton bt = new JButton("button");
			  this.setLayout(new FlowLayout());
			  this.add(bt);
			  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			  this.setVisible(true);
		  }
	  
	  
	  public static void main(String[] args){
	      new Example15;
		  }
	  }
	  #+END_SRC
* JDialog 
  1. Another top-level window if Swing.
	 #+BEGIN_SRC java
	 import java.awt.*;
	 import java.awt.event.*;
	 import javax.swing.*;
	 public class Example16{
	     public static void main(String[] args){
		     //create two button
			 JButton btn1 = new JButton("modal dialog");
			 JButton btn2 = new JButton("in modal dialog");
			 JFrame f= new JFrame("DialogDemo");
			 f.setSize(300,250);
			 f.setLocation(300,200);
			 f.setLayout(new FlowLayout());//create the layout manager
			 //add the button
			 f.add(btn1);
			 f.add(btn2);
			 f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			 f.setVisible(true);
			 final JLabel = new JLabel();
			 final JDialog dialog = new JDialog(f,"Dialog");
			 dialog.setSize(220,150);                   //the size of the dialog
			 dialog.setLocation(350,250);               //the location if the dialog
			 dialog.setLayout(new FlowLayout());        //set the layout manager of the dialog
			 final JButton btn3 = new JButton("Yes");   //create the button object
			 dialog.add(btn3);
			 btn1.addActionListener(new ActionListener() {
			     public void actionPerformed(ActionEvent e){
				     dialog.setModal(true);
					 if(dialog.getComponent().length==1){
					     dialog.add(label);
					 }
					 label.setText("model dialog click Yes to close");
					 dialog.setVisible(true);
				 }
			 });
			 
			 btn2.addActionListener(new ActionListener() {
			     public void actionPerformed(ActionEvent e){
				     dialog.setModal(false);
					 if(dialog.getComponent().length == 1){
					     dialog.add(label);
					 }
					 
					 label.setText("false modal dialog click Yes to close");
					 dialog.setVisible(true);
				 }
			 });
			 
			 btn3.addActionListener(new ActionListener (){
			     public void actionPerformed(ActionEvent e){
				     dialog.dispose();
				 }
			 });
			 
		 }
	 }
	 #+END_SRC
* 
