* slot: 插槽
  组件的插槽是为了让我们封装的组件更加具有扩展性。让使用者可以决定组件内部一些内
  容到底展示什么。
** 如何封装插槽 :: 抽取共性，保留不同。
   + 最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽
   + 一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容
   + 是搜索框，还是文字，还是菜单，由调用者自己来决定
** slot基本使用
   1. 插槽的基本使用
      #+begin_src html
        <slot></slot>
      #+end_src
   2. 插槽的默认值
      #+begin_src html
        <slot><button></button></slot>
      #+end_src
   3. 如果有多个值，同时放入组件进行替换时，一起作为替换元素
   #+begin_src web
     <div id="app">
         <cpn>
             <button>案例</button>
         </cpn>
         <cpn></cpn>
         <cpn></cpn>
         <cpn></cpn>
     </div>
     
     <template>
         <div id="cpn">
             <h2>我是组件</h2>
             <p>我是组件，哈哈哈</p>
             <slot>
                 <button>默认值</button>
             </slot>
         </div>
     </template>
     
     
     <script type="text/javascript">
      const app = new Vue(){
          el: '#app',
          data:{
              message: '你好啊'
          },
          components: {
              cpn: {
                  template: '#cpn'
              }
          }
      }
     </script>
   #+end_src

** 具名插槽
   #+begin_src web
     <div id="app">
         <cpn>
             <span slot="center">标题</span>
         </cpn>
         <cpn>
             <button slot="left">返回</button>
         </cpn>
     </div>

     <template id="cpn">
         <div>
             <slot name="left"><span>左边</span></slot>
             <slot name="center"><span>中间</span></slot>
             <slot name="right"><span>右边</span></slot>
         </div>
     </template>


     <script type="text/javascript">
      const app = new Vue(){
          el: '#app',
          data:{
              message: '你好啊'
          },
          components: {
              cpn: {
                  template: '#cpn'
              }
          }
      }
     </script>
   #+end_src

** 编译作用域
   + 父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级
     作用域内编译
   #+begin_src web
     <div id="app">
         <!-- 这里的isShow 是app中的isShow -->
         <cpn v-show="isShow"></cpn>
     </div>

     <template id="cpn">
         <div>
             <h2>我是子组件</h2>
             <p>我是内容，哈哈哈<p>
         </div>
     </template>


     <script type="text/javascript">
      const app = new Vue(){
          el: '#app',
          data:{
              message: '你好啊',
              isShow: true
          },
          components: {
              cpn: {
                  template: '#cpn'
                  data(){
                      return {
                          isShow: false
                      }
                  }
              }
          }
      }
     </script>
   #+end_src

** 作用域插槽
   + 父组件替换插槽的标签，但是内容由子组件来提供
   #+begin_src web
     <div id="app">
         <cpn></cpn>
         <cpn>
             <!-- 目的是获取子组件中的pLanguages -->
             <template slot-scope="slot">
                 <span v-for="item in slot.data">{{item}} - </span>
             </template>
             <template slot-scope="slot">
                 <span >{{slot.data.join('-')}}</span>
             </template>
         </cpn>
         <cpn>
             <!-- 目的是获取子组件中的pLanguages -->
             <template slot-scope="slot">
                 <span v-for="item in slot.data">{{item}}</span>
             </template>
         </cpn>
     </div>

     <template id="cpn">
         <div>
             <slot :data="pLanguages">
                 <ul>
                     <li v-for="item in pLanguages">{{item}}</li>
                 </ul>
             </slot>
         </div>
     </template>

     <script type="text/javascript">
      const app = new Vue(){
          el: '#app',
          data:{
              message: '你好啊',
          },
          components: {
              cpn: {
                  template: '#cpn'
                  data(){
                      return {
                          pLanguages:['javaScript','c++','Java','c#','Go','Swift']
                      }
                  }
              }
          }
      }
     </script>
   #+end_src
   
